{
  "_from": "connect-history-api-fallback",
  "_id": "connect-history-api-fallback@1.5.0",
  "_inBundle": false,
  "_integrity": "sha1-sGhzk0vF40T+9hGhlqb6rgruAVo=",
  "_location": "/connect-history-api-fallback",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "connect-history-api-fallback",
    "fetchSpec": "latest",
    "name": "connect-history-api-fallback",
    "raw": "connect-history-api-fallback",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/",
    "/browser-sync",
    "/browser-sync-ui",
    "/lite-server"
  ],
  "_resolved": "https://registry.npmjs.org/connect-history-api-fallback/-/connect-history-api-fallback-1.5.0.tgz",
  "_shasum": "b06873934bc5e344fef611a196a6faae0aee015a",
  "_shrinkwrap": null,
  "_spec": "connect-history-api-fallback",
  "_where": "C:\\Users\\SAURABH SHARMA\\Desktop\\coursera\\Bootstrap4\\conFusion",
  "author": {
    "email": "bripkens.dev@gmail.com",
    "name": "Ben Ripkens",
    "url": "http://bripkens.de"
  },
  "bugs": {
    "url": "https://github.com/bripkens/connect-history-api-fallback/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "Craig Myles",
      "email": "cr@igmyles.com",
      "url": "http://www.craigmyles.com"
    }
  ],
  "dependencies": {},
  "deprecated": false,
  "description": "Provides a fallback for non-existing directories so that the HTML 5 history API can be used.",
  "devDependencies": {
    "eslint": "^0.18.0",
    "nodeunit": "^0.9.1",
    "sinon": "^1.14.1"
  },
  "engines": {
    "node": ">=0.8"
  },
  "files": [
    "lib"
  ],
  "homepage": "https://github.com/bripkens/connect-history-api-fallback#readme",
  "keyswords": [
    "connect",
    "fallback",
    "history api",
    "html5",
    "spa"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "name": "connect-history-api-fallback",
  "optionalDependencies": {},
  "readme": "<h1 align=\"center\">connect-history-api-fallback</h1>\r\n<p align=\"center\">Middleware to proxy requests through a specified index page, useful for Single Page Applications that utilise the HTML5 History API.</p>\r\n\r\n[![Build Status](https://travis-ci.org/bripkens/connect-history-api-fallback.svg?branch=master)](https://travis-ci.org/bripkens/connect-history-api-fallback)\r\n[![Dependency Status](https://david-dm.org/bripkens/connect-history-api-fallback/master.svg)](https://david-dm.org/bripkens/connect-history-api-fallback/master)\r\n\r\n[![NPM](https://nodei.co/npm/connect-history-api-fallback.png?downloads=true&downloadRank=true)](https://nodei.co/npm/connect-history-api-fallback/)\r\n\r\n\r\n<h2>Table of Contents</h2>\r\n\r\n<!-- TOC depthFrom:2 depthTo:6 withLinks:1 updateOnSave:1 orderedList:0 -->\r\n\r\n- [Introduction](#introduction)\r\n- [Usage](#usage)\r\n- [Options](#options)\r\n\t- [index](#index)\r\n\t- [rewrites](#rewrites)\r\n\t- [verbose](#verbose)\r\n\t- [htmlAcceptHeaders](#htmlacceptheaders)\r\n\t- [disableDotRule](#disabledotrule)\r\n\r\n<!-- /TOC -->\r\n\r\n## Introduction\r\n\r\nSingle Page Applications (SPA) typically only utilise one index file that is\r\naccessible by web browsers: usually `index.html`. Navigation in the application\r\nis then commonly handled using JavaScript with the help of the\r\n[HTML5 History API](http://www.w3.org/html/wg/drafts/html/master/single-page.html#the-history-interface).\r\nThis results in issues when the user hits the refresh button or is directly\r\naccessing a page other than the landing page, e.g. `/help` or `/help/online`\r\nas the web server bypasses the index file to locate the file at this location.\r\nAs your application is a SPA, the web server will fail trying to retrieve the file and return a *404 - Not Found*\r\nmessage to the user.\r\n\r\nThis tiny middleware addresses some of the issues. Specifically, it will change\r\nthe requested location to the index you specify (default being `/index.html`)\r\nwhenever there is a request which fulfills the following criteria:\r\n\r\n 1. The request is a GET request\r\n 2. which accepts `text/html`,\r\n 3. is not a direct file request, i.e. the requested path does not contain a\r\n    `.` (DOT) character and\r\n 4. does not match a pattern provided in options.rewrites (see options below)\r\n\r\n## Usage\r\n\r\nThe middleware is available through NPM and can easily be added.\r\n\r\n```\r\nnpm install --save connect-history-api-fallback\r\n```\r\n\r\nImport the library\r\n\r\n```javascript\r\nvar history = require('connect-history-api-fallback');\r\n```\r\n\r\nNow you only need to add the middleware to your application like so\r\n\r\n```javascript\r\nvar connect = require('connect');\r\n\r\nvar app = connect()\r\n  .use(history())\r\n  .listen(3000);\r\n```\r\n\r\nOf course you can also use this piece of middleware with express:\r\n\r\n```javascript\r\nvar express = require('express');\r\n\r\nvar app = express();\r\napp.use(history());\r\n```\r\n\r\n## Options\r\nYou can optionally pass options to the library when obtaining the middleware\r\n\r\n```javascript\r\nvar middleware = history({});\r\n```\r\n\r\n### index\r\nOverride the index (default `/index.html`)\r\n\r\n```javascript\r\nhistory({\r\n  index: '/default.html'\r\n});\r\n```\r\n\r\n### rewrites\r\nOverride the index when the request url matches a regex pattern. You can either rewrite to a static string or use a function to transform the incoming request.\r\n\r\nThe following will rewrite a request that matches the `/\\/soccer/` pattern to `/soccer.html`.\r\n```javascript\r\nhistory({\r\n  rewrites: [\r\n    { from: /\\/soccer/, to: '/soccer.html'}\r\n  ]\r\n});\r\n```\r\n\r\nAlternatively functions can be used to have more control over the rewrite process. For instance, the following listing shows how requests to `/libs/jquery/jquery.1.12.0.min.js` and the like can be routed to `./bower_components/libs/jquery/jquery.1.12.0.min.js`. You can also make use of this if you have an API version in the URL path.\r\n```javascript\r\nhistory({\r\n  rewrites: [\r\n    {\r\n      from: /^\\/libs\\/.*$/,\r\n      to: function(context) {\r\n        return '/bower_components' + context.parsedUrl.pathname;\r\n      }\r\n    }\r\n  ]\r\n});\r\n```\r\n\r\nThe function will always be called with a context object that has the following properties:\r\n\r\n - **parsedUrl**: Information about the URL as provided by the [URL module's](https://nodejs.org/api/url.html#url_url_parse_urlstr_parsequerystring_slashesdenotehost) `url.parse`.\r\n - **match**: An Array of matched results as provided by `String.match(...)`.\r\n - **request**: The HTTP request object.\r\n\r\n\r\n### verbose\r\nThis middleware does not log any information by default. If you wish to activate logging, then you can do so via the `verbose` option or by specifying a logger function.\r\n\r\n```javascript\r\nhistory({\r\n  verbose: true\r\n});\r\n```\r\n\r\nAlternatively use your own logger\r\n\r\n```javascript\r\nhistory({\r\n  logger: console.log.bind(console)\r\n});\r\n```\r\n\r\n### htmlAcceptHeaders\r\nOverride the default `Accepts:` headers that are queried when matching HTML content requests (Default: `['text/html', '*/*']`).\r\n\r\n```javascript\r\nhistory({\r\n  htmlAcceptHeaders: ['text/html', 'application/xhtml+xml']\r\n})\r\n```\r\n\r\n### disableDotRule\r\nDisables the dot rule mentioned above:\r\n\r\n> […] is not a direct file request, i.e. the requested path does not contain a `.` (DOT) character […]\r\n\r\n```javascript\r\nhistory({\r\n  disableDotRule: true\r\n})\r\n```\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/bripkens/connect-history-api-fallback.git"
  },
  "scripts": {
    "test": "eslint lib/index.js test/index_test.js && nodeunit test/index_test.js"
  },
  "version": "1.5.0"
}
